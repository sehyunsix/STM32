
print_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fa0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020ac  080020ac  000030ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020ec  080020ec  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080020ec  080020ec  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020ec  080020ec  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020ec  080020ec  000030ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020f0  080020f0  000030f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080020f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  0800215c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800215c  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006aa1  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b6  00000000  00000000  0000ab32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000519  00000000  00000000  0000c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001793a  00000000  00000000  0000cbc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e96  00000000  00000000  000244fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a25  00000000  00000000  0002c391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afdb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000afdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b1e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002094 	.word	0x08002094

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002094 	.word	0x08002094

0800014c <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	if(ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f001 f970 	bl	8001448 <HAL_UART_Transmit>
		 HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f001 f969 	bl	8001448 <HAL_UART_Transmit>
		return ch;
 8000176:	687b      	ldr	r3, [r7, #4]

}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080020ac 	.word	0x080020ac
 8000184:	20000084 	.word	0x20000084

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fa0e 	bl	80005ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f810 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f87a 	bl	800028c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f84e 	bl	8000238 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("Hello world!\n");
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <main+0x28>)
 800019e:	f001 fbeb 	bl	8001978 <puts>
	  HAL_Delay (1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a6:	f000 fa63 	bl	8000670 <HAL_Delay>
	  printf("Hello world!\n");
 80001aa:	bf00      	nop
 80001ac:	e7f6      	b.n	800019c <main+0x14>
 80001ae:	bf00      	nop
 80001b0:	080020b0 	.word	0x080020b0

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	@ 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fbe0 	bl	8001988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e6:	2300      	movs	r3, #0
 80001e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ea:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fcc7 	bl	8000b88 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000200:	f000 f85a 	bl	80002b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f000 ff34 	bl	800108c <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800022a:	f000 f845 	bl	80002b8 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	@ 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800023c:	4b11      	ldr	r3, [pc, #68]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800023e:	4a12      	ldr	r2, [pc, #72]	@ (8000288 <MX_USART2_UART_Init+0x50>)
 8000240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000242:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800024a:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000250:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800025e:	220c      	movs	r2, #12
 8000260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000270:	f001 f89a 	bl	80013a8 <HAL_UART_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800027a:	f000 f81d 	bl	80002b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000084 	.word	0x20000084
 8000288:	40004400 	.word	0x40004400

0800028c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000292:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <MX_GPIO_Init+0x28>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <MX_GPIO_Init+0x28>)
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <MX_GPIO_Init+0x28>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0304 	and.w	r3, r3, #4
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	40021000 	.word	0x40021000

080002b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002bc:	b672      	cpsid	i
}
 80002be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <Error_Handler+0x8>

080002c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <HAL_MspInit+0x5c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a14      	ldr	r2, [pc, #80]	@ (8000320 <HAL_MspInit+0x5c>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <HAL_MspInit+0x5c>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <HAL_MspInit+0x5c>)
 80002e4:	69db      	ldr	r3, [r3, #28]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <HAL_MspInit+0x5c>)
 80002e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002ec:	61d3      	str	r3, [r2, #28]
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <HAL_MspInit+0x5c>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <HAL_MspInit+0x60>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	4a04      	ldr	r2, [pc, #16]	@ (8000324 <HAL_MspInit+0x60>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000316:	bf00      	nop
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000
 8000324:	40010000 	.word	0x40010000

08000328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1b      	ldr	r2, [pc, #108]	@ (80003b0 <HAL_UART_MspInit+0x88>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d12f      	bne.n	80003a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000348:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <HAL_UART_MspInit+0x8c>)
 800034a:	69db      	ldr	r3, [r3, #28]
 800034c:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <HAL_UART_MspInit+0x8c>)
 800034e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000352:	61d3      	str	r3, [r2, #28]
 8000354:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <HAL_UART_MspInit+0x8c>)
 8000356:	69db      	ldr	r3, [r3, #28]
 8000358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <HAL_UART_MspInit+0x8c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <HAL_UART_MspInit+0x8c>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <HAL_UART_MspInit+0x8c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	60bb      	str	r3, [r7, #8]
 8000376:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000378:	2304      	movs	r3, #4
 800037a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800037c:	2302      	movs	r3, #2
 800037e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000380:	2303      	movs	r3, #3
 8000382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	4619      	mov	r1, r3
 800038a:	480b      	ldr	r0, [pc, #44]	@ (80003b8 <HAL_UART_MspInit+0x90>)
 800038c:	f000 fa78 	bl	8000880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000390:	2308      	movs	r3, #8
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <HAL_UART_MspInit+0x90>)
 80003a4:	f000 fa6c 	bl	8000880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40004400 	.word	0x40004400
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <NMI_Handler+0x4>

080003c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <HardFault_Handler+0x4>

080003cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <MemManage_Handler+0x4>

080003d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	bf00      	nop
 80003e2:	e7fd      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040c:	f000 f914 	bl	8000638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	e00a      	b.n	800043c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000426:	f3af 8000 	nop.w
 800042a:	4601      	mov	r1, r0
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	1c5a      	adds	r2, r3, #1
 8000430:	60ba      	str	r2, [r7, #8]
 8000432:	b2ca      	uxtb	r2, r1
 8000434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	429a      	cmp	r2, r3
 8000442:	dbf0      	blt.n	8000426 <_read+0x12>
  }

  return len;
 8000444:	687b      	ldr	r3, [r7, #4]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b086      	sub	sp, #24
 8000452:	af00      	add	r7, sp, #0
 8000454:	60f8      	str	r0, [r7, #12]
 8000456:	60b9      	str	r1, [r7, #8]
 8000458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
 800045e:	e009      	b.n	8000474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	60ba      	str	r2, [r7, #8]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff fe6f 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	3301      	adds	r3, #1
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	697a      	ldr	r2, [r7, #20]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	429a      	cmp	r2, r3
 800047a:	dbf1      	blt.n	8000460 <_write+0x12>
  }
  return len;
 800047c:	687b      	ldr	r3, [r7, #4]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <_close>:

int _close(int file)
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000492:	4618      	mov	r0, r3
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004ac:	605a      	str	r2, [r3, #4]
  return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <_isatty>:

int _isatty(int file)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b085      	sub	sp, #20
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
	...

080004e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f0:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <_sbrk+0x5c>)
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <_sbrk+0x60>)
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <_sbrk+0x64>)
 8000506:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <_sbrk+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	429a      	cmp	r2, r3
 8000516:	d207      	bcs.n	8000528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000518:	f001 fa3e 	bl	8001998 <__errno>
 800051c:	4603      	mov	r3, r0
 800051e:	220c      	movs	r2, #12
 8000520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000526:	e009      	b.n	800053c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <_sbrk+0x64>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <_sbrk+0x64>)
 8000538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20005000 	.word	0x20005000
 8000548:	00000400 	.word	0x00000400
 800054c:	200000cc 	.word	0x200000cc
 8000550:	20000220 	.word	0x20000220

08000554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000560:	f7ff fff8 	bl	8000554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000566:	490c      	ldr	r1, [pc, #48]	@ (8000598 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000568:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <LoopFillZerobss+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a09      	ldr	r2, [pc, #36]	@ (80005a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800057c:	4c09      	ldr	r4, [pc, #36]	@ (80005a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058a:	f001 fa0b 	bl	80019a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff fdfb 	bl	8000188 <main>
  bx lr
 8000592:	4770      	bx	lr
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800059c:	080020f4 	.word	0x080020f4
  ldr r2, =_sbss
 80005a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005a4:	20000220 	.word	0x20000220

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <HAL_Init+0x28>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	@ (80005d4 <HAL_Init+0x28>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f92b 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f7ff fe7c 	bl	80002c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f935 	bl	8000866 <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000614:	f000 f90b 	bl	800082e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_IncTick+0x1c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <HAL_IncTick+0x20>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a03      	ldr	r2, [pc, #12]	@ (8000658 <HAL_IncTick+0x20>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000008 	.word	0x20000008
 8000658:	200000d0 	.word	0x200000d0

0800065c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b02      	ldr	r3, [pc, #8]	@ (800066c <HAL_GetTick+0x10>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	200000d0 	.word	0x200000d0

08000670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff0 	bl	800065c <HAL_GetTick>
 800067c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000688:	d005      	beq.n	8000696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <HAL_Delay+0x44>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4413      	add	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000696:	bf00      	nop
 8000698:	f7ff ffe0 	bl	800065c <HAL_GetTick>
 800069c:	4602      	mov	r2, r0
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d8f7      	bhi.n	8000698 <HAL_Delay+0x28>
  {
  }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	@ (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	@ (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	@ 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007e4:	d301      	bcc.n	80007ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00f      	b.n	800080a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <SysTick_Config+0x40>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f2:	210f      	movs	r1, #15
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007f8:	f7ff ff90 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <SysTick_Config+0x40>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000802:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <SysTick_Config+0x40>)
 8000804:	2207      	movs	r2, #7
 8000806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	e000e010 	.word	0xe000e010

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff49 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff5e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ff90 	bl	8000770 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5f 	bl	800071c <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff ffb0 	bl	80007d4 <SysTick_Config>
 8000874:	4603      	mov	r3, r0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b08b      	sub	sp, #44	@ 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e169      	b.n	8000b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000894:	2201      	movs	r2, #1
 8000896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f040 8158 	bne.w	8000b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	4a9a      	ldr	r2, [pc, #616]	@ (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d05e      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008bc:	4a98      	ldr	r2, [pc, #608]	@ (8000b20 <HAL_GPIO_Init+0x2a0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d875      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008c2:	4a98      	ldr	r2, [pc, #608]	@ (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d058      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008c8:	4a96      	ldr	r2, [pc, #600]	@ (8000b24 <HAL_GPIO_Init+0x2a4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d86f      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008ce:	4a96      	ldr	r2, [pc, #600]	@ (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d052      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008d4:	4a94      	ldr	r2, [pc, #592]	@ (8000b28 <HAL_GPIO_Init+0x2a8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d869      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008da:	4a94      	ldr	r2, [pc, #592]	@ (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d04c      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008e0:	4a92      	ldr	r2, [pc, #584]	@ (8000b2c <HAL_GPIO_Init+0x2ac>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d863      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008e6:	4a92      	ldr	r2, [pc, #584]	@ (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d046      	beq.n	800097a <HAL_GPIO_Init+0xfa>
 80008ec:	4a90      	ldr	r2, [pc, #576]	@ (8000b30 <HAL_GPIO_Init+0x2b0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d85d      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008f2:	2b12      	cmp	r3, #18
 80008f4:	d82a      	bhi.n	800094c <HAL_GPIO_Init+0xcc>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d859      	bhi.n	80009ae <HAL_GPIO_Init+0x12e>
 80008fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000900 <HAL_GPIO_Init+0x80>)
 80008fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000900:	0800097b 	.word	0x0800097b
 8000904:	08000955 	.word	0x08000955
 8000908:	08000967 	.word	0x08000967
 800090c:	080009a9 	.word	0x080009a9
 8000910:	080009af 	.word	0x080009af
 8000914:	080009af 	.word	0x080009af
 8000918:	080009af 	.word	0x080009af
 800091c:	080009af 	.word	0x080009af
 8000920:	080009af 	.word	0x080009af
 8000924:	080009af 	.word	0x080009af
 8000928:	080009af 	.word	0x080009af
 800092c:	080009af 	.word	0x080009af
 8000930:	080009af 	.word	0x080009af
 8000934:	080009af 	.word	0x080009af
 8000938:	080009af 	.word	0x080009af
 800093c:	080009af 	.word	0x080009af
 8000940:	080009af 	.word	0x080009af
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000971 	.word	0x08000971
 800094c:	4a79      	ldr	r2, [pc, #484]	@ (8000b34 <HAL_GPIO_Init+0x2b4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d013      	beq.n	800097a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000952:	e02c      	b.n	80009ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e029      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	3304      	adds	r3, #4
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e024      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	3308      	adds	r3, #8
 800096c:	623b      	str	r3, [r7, #32]
          break;
 800096e:	e01f      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	330c      	adds	r3, #12
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e01a      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000982:	2304      	movs	r3, #4
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e013      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d105      	bne.n	800099c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	611a      	str	r2, [r3, #16]
          break;
 800099a:	e009      	b.n	80009b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800099c:	2308      	movs	r3, #8
 800099e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	615a      	str	r2, [r3, #20]
          break;
 80009a6:	e003      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	e000      	b.n	80009b0 <HAL_GPIO_Init+0x130>
          break;
 80009ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2bff      	cmp	r3, #255	@ 0xff
 80009b4:	d801      	bhi.n	80009ba <HAL_GPIO_Init+0x13a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	e001      	b.n	80009be <HAL_GPIO_Init+0x13e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3304      	adds	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2bff      	cmp	r3, #255	@ 0xff
 80009c4:	d802      	bhi.n	80009cc <HAL_GPIO_Init+0x14c>
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	e002      	b.n	80009d2 <HAL_GPIO_Init+0x152>
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	3b08      	subs	r3, #8
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	210f      	movs	r1, #15
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	401a      	ands	r2, r3
 80009e4:	6a39      	ldr	r1, [r7, #32]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	431a      	orrs	r2, r3
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 80b1 	beq.w	8000b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a00:	4b4d      	ldr	r3, [pc, #308]	@ (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a4c      	ldr	r2, [pc, #304]	@ (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b38 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a18:	4a48      	ldr	r2, [pc, #288]	@ (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1c:	089b      	lsrs	r3, r3, #2
 8000a1e:	3302      	adds	r3, #2
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	220f      	movs	r2, #15
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a40      	ldr	r2, [pc, #256]	@ (8000b40 <HAL_GPIO_Init+0x2c0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d013      	beq.n	8000a6c <HAL_GPIO_Init+0x1ec>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a3f      	ldr	r2, [pc, #252]	@ (8000b44 <HAL_GPIO_Init+0x2c4>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d00d      	beq.n	8000a68 <HAL_GPIO_Init+0x1e8>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b48 <HAL_GPIO_Init+0x2c8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x1e4>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3d      	ldr	r2, [pc, #244]	@ (8000b4c <HAL_GPIO_Init+0x2cc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d101      	bne.n	8000a60 <HAL_GPIO_Init+0x1e0>
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	e006      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e004      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e002      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <HAL_GPIO_Init+0x1ee>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a70:	f002 0203 	and.w	r2, r2, #3
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	4093      	lsls	r3, r2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7e:	492f      	ldr	r1, [pc, #188]	@ (8000b3c <HAL_GPIO_Init+0x2bc>)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	492c      	ldr	r1, [pc, #176]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	608b      	str	r3, [r1, #8]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4928      	ldr	r1, [pc, #160]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	4922      	ldr	r1, [pc, #136]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60cb      	str	r3, [r1, #12]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ace:	4b20      	ldr	r3, [pc, #128]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	491e      	ldr	r1, [pc, #120]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	4918      	ldr	r1, [pc, #96]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	604b      	str	r3, [r1, #4]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4914      	ldr	r1, [pc, #80]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d021      	beq.n	8000b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	490e      	ldr	r1, [pc, #56]	@ (8000b50 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	600b      	str	r3, [r1, #0]
 8000b1c:	e021      	b.n	8000b62 <HAL_GPIO_Init+0x2e2>
 8000b1e:	bf00      	nop
 8000b20:	10320000 	.word	0x10320000
 8000b24:	10310000 	.word	0x10310000
 8000b28:	10220000 	.word	0x10220000
 8000b2c:	10210000 	.word	0x10210000
 8000b30:	10120000 	.word	0x10120000
 8000b34:	10110000 	.word	0x10110000
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	40011400 	.word	0x40011400
 8000b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	4909      	ldr	r1, [pc, #36]	@ (8000b84 <HAL_GPIO_Init+0x304>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b64:	3301      	adds	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f47f ae8e 	bne.w	8000894 <HAL_GPIO_Init+0x14>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	372c      	adds	r7, #44	@ 0x2c
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e272      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 8087 	beq.w	8000cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba8:	4b92      	ldr	r3, [pc, #584]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 030c 	and.w	r3, r3, #12
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d00c      	beq.n	8000bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 030c 	and.w	r3, r3, #12
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d112      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
 8000bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bcc:	d10b      	bne.n	8000be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bce:	4b89      	ldr	r3, [pc, #548]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d06c      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x12c>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d168      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e24c      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bee:	d106      	bne.n	8000bfe <HAL_RCC_OscConfig+0x76>
 8000bf0:	4b80      	ldr	r3, [pc, #512]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a7f      	ldr	r2, [pc, #508]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e02e      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0x98>
 8000c06:	4b7b      	ldr	r3, [pc, #492]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a7a      	ldr	r2, [pc, #488]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b78      	ldr	r3, [pc, #480]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a77      	ldr	r2, [pc, #476]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e01d      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0xbc>
 8000c2a:	4b72      	ldr	r3, [pc, #456]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a71      	ldr	r2, [pc, #452]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b6f      	ldr	r3, [pc, #444]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e00b      	b.n	8000c5c <HAL_RCC_OscConfig+0xd4>
 8000c44:	4b6b      	ldr	r3, [pc, #428]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a6a      	ldr	r2, [pc, #424]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b68      	ldr	r3, [pc, #416]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a67      	ldr	r2, [pc, #412]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c64:	f7ff fcfa 	bl	800065c <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6a:	e008      	b.n	8000c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fcf6 	bl	800065c <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b64      	cmp	r3, #100	@ 0x64
 8000c78:	d901      	bls.n	8000c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e200      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f0      	beq.n	8000c6c <HAL_RCC_OscConfig+0xe4>
 8000c8a:	e014      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8c:	f7ff fce6 	bl	800065c <HAL_GetTick>
 8000c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c92:	e008      	b.n	8000ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c94:	f7ff fce2 	bl	800065c <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	2b64      	cmp	r3, #100	@ 0x64
 8000ca0:	d901      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e1ec      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	4b53      	ldr	r3, [pc, #332]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f0      	bne.n	8000c94 <HAL_RCC_OscConfig+0x10c>
 8000cb2:	e000      	b.n	8000cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d063      	beq.n	8000d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cce:	4b49      	ldr	r3, [pc, #292]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 030c 	and.w	r3, r3, #12
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d11c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x18c>
 8000cda:	4b46      	ldr	r3, [pc, #280]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d116      	bne.n	8000d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	4b43      	ldr	r3, [pc, #268]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <HAL_RCC_OscConfig+0x176>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e1c0      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4939      	ldr	r1, [pc, #228]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	e03a      	b.n	8000d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d020      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d1c:	4b36      	ldr	r3, [pc, #216]	@ (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d22:	f7ff fc9b 	bl	800065c <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fc97 	bl	800065c <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e1a1      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f0      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d48:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4927      	ldr	r1, [pc, #156]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
 8000d5c:	e015      	b.n	8000d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <HAL_RCC_OscConfig+0x270>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fc7a 	bl	800065c <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fc76 	bl	800065c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e180      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d03a      	beq.n	8000e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d019      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc5a 	bl	800065c <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc56 	bl	800065c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e160      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f000 face 	bl	800136c <RCC_Delay>
 8000dd0:	e01c      	b.n	8000e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_RCC_OscConfig+0x274>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc40 	bl	800065c <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	e00f      	b.n	8000e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc3c 	bl	800065c <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d908      	bls.n	8000e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e146      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	42420000 	.word	0x42420000
 8000dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e00:	4b92      	ldr	r3, [pc, #584]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e9      	bne.n	8000de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80a6 	beq.w	8000f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10d      	bne.n	8000e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b88      	ldr	r3, [pc, #544]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a87      	ldr	r2, [pc, #540]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b85      	ldr	r3, [pc, #532]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e42:	2301      	movs	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e46:	4b82      	ldr	r3, [pc, #520]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e52:	4b7f      	ldr	r3, [pc, #508]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a7e      	ldr	r2, [pc, #504]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fbfd 	bl	800065c <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e66:	f7ff fbf9 	bl	800065c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b64      	cmp	r3, #100	@ 0x64
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e103      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	4b75      	ldr	r3, [pc, #468]	@ (8001050 <HAL_RCC_OscConfig+0x4c8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0f0      	beq.n	8000e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x312>
 8000e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a6e      	ldr	r2, [pc, #440]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	e02d      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x334>
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a69      	ldr	r2, [pc, #420]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	4b67      	ldr	r3, [pc, #412]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a66      	ldr	r2, [pc, #408]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	f023 0304 	bic.w	r3, r3, #4
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	e01c      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10c      	bne.n	8000ede <HAL_RCC_OscConfig+0x356>
 8000ec4:	4b61      	ldr	r3, [pc, #388]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a60      	ldr	r2, [pc, #384]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6213      	str	r3, [r2, #32]
 8000edc:	e00b      	b.n	8000ef6 <HAL_RCC_OscConfig+0x36e>
 8000ede:	4b5b      	ldr	r3, [pc, #364]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a5a      	ldr	r2, [pc, #360]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b58      	ldr	r3, [pc, #352]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a57      	ldr	r2, [pc, #348]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d015      	beq.n	8000f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fbad 	bl	800065c <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fba9 	bl	800065c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e0b1      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0ee      	beq.n	8000f06 <HAL_RCC_OscConfig+0x37e>
 8000f28:	e014      	b.n	8000f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb97 	bl	800065c <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fb93 	bl	800065c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e09b      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	4b40      	ldr	r3, [pc, #256]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1ee      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8087 	beq.w	800107e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 030c 	and.w	r3, r3, #12
 8000f78:	2b08      	cmp	r3, #8
 8000f7a:	d061      	beq.n	8001040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d146      	bne.n	8001012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb67 	bl	800065c <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fb63 	bl	800065c <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e06d      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f0      	bne.n	8000f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb8:	d108      	bne.n	8000fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fba:	4b24      	ldr	r3, [pc, #144]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	4921      	ldr	r1, [pc, #132]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a19      	ldr	r1, [r3, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	491b      	ldr	r1, [pc, #108]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb37 	bl	800065c <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff2:	f7ff fb33 	bl	800065c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e03d      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x46a>
 8001010:	e035      	b.n	800107e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_RCC_OscConfig+0x4cc>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fb20 	bl	800065c <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fb1c 	bl	800065c <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e026      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <HAL_RCC_OscConfig+0x4c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x498>
 800103e:	e01e      	b.n	800107e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e019      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
 800104c:	40021000 	.word	0x40021000
 8001050:	40007000 	.word	0x40007000
 8001054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_RCC_OscConfig+0x500>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	429a      	cmp	r2, r3
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	429a      	cmp	r2, r3
 8001078:	d001      	beq.n	800107e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0d0      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a0:	4b6a      	ldr	r3, [pc, #424]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d910      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b67      	ldr	r3, [pc, #412]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0207 	bic.w	r2, r3, #7
 80010b6:	4965      	ldr	r1, [pc, #404]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b63      	ldr	r3, [pc, #396]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0b8      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e8:	4b59      	ldr	r3, [pc, #356]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a58      	ldr	r2, [pc, #352]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80010ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001100:	4b53      	ldr	r3, [pc, #332]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a52      	ldr	r2, [pc, #328]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800110a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800110c:	4b50      	ldr	r3, [pc, #320]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	494d      	ldr	r1, [pc, #308]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d040      	beq.n	80011ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b47      	ldr	r3, [pc, #284]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d115      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e07f      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114a:	4b41      	ldr	r3, [pc, #260]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e073      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06b      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116a:	4b39      	ldr	r3, [pc, #228]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f023 0203 	bic.w	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4936      	ldr	r1, [pc, #216]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800117c:	f7ff fa6e 	bl	800065c <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001182:	e00a      	b.n	800119a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	f7ff fa6a 	bl	800065c <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001192:	4293      	cmp	r3, r2
 8001194:	d901      	bls.n	800119a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e053      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 020c 	and.w	r2, r3, #12
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d1eb      	bne.n	8001184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d210      	bcs.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4922      	ldr	r1, [pc, #136]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e032      	b.n	8001242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d008      	beq.n	80011fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4916      	ldr	r1, [pc, #88]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121a:	f000 f821 	bl	8001260 <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	490a      	ldr	r1, [pc, #40]	@ (8001254 <HAL_RCC_ClockConfig+0x1c8>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <HAL_RCC_ClockConfig+0x1cc>)
 8001234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_RCC_ClockConfig+0x1d0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f9cc 	bl	80005d8 <HAL_InitTick>

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	080020c0 	.word	0x080020c0
 8001258:	20000000 	.word	0x20000000
 800125c:	20000004 	.word	0x20000004

08001260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d002      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x30>
 800128a:	2b08      	cmp	r3, #8
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x36>
 800128e:	e027      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001292:	613b      	str	r3, [r7, #16]
      break;
 8001294:	e027      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	0c9b      	lsrs	r3, r3, #18
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a0:	5cd3      	ldrb	r3, [r2, r3]
 80012a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d010      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	0c5b      	lsrs	r3, r3, #17
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012c2:	fb03 f202 	mul.w	r2, r3, r2
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e004      	b.n	80012da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	613b      	str	r3, [r7, #16]
      break;
 80012de:	e002      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e6:	693b      	ldr	r3, [r7, #16]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
 80012f8:	007a1200 	.word	0x007a1200
 80012fc:	080020d8 	.word	0x080020d8
 8001300:	080020e8 	.word	0x080020e8
 8001304:	003d0900 	.word	0x003d0900

08001308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800130c:	4b02      	ldr	r3, [pc, #8]	@ (8001318 <HAL_RCC_GetHCLKFreq+0x10>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	20000000 	.word	0x20000000

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001320:	f7ff fff2 	bl	8001308 <HAL_RCC_GetHCLKFreq>
 8001324:	4602      	mov	r2, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4903      	ldr	r1, [pc, #12]	@ (8001340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001332:	5ccb      	ldrb	r3, [r1, r3]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	080020d0 	.word	0x080020d0

08001344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001348:	f7ff ffde 	bl	8001308 <HAL_RCC_GetHCLKFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	0adb      	lsrs	r3, r3, #11
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	4903      	ldr	r1, [pc, #12]	@ (8001368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001360:	4618      	mov	r0, r3
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	080020d0 	.word	0x080020d0

0800136c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <RCC_Delay+0x34>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <RCC_Delay+0x38>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0a5b      	lsrs	r3, r3, #9
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001388:	bf00      	nop
  }
  while (Delay --);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	60fa      	str	r2, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f9      	bne.n	8001388 <RCC_Delay+0x1c>
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000000 	.word	0x20000000
 80013a4:	10624dd3 	.word	0x10624dd3

080013a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e042      	b.n	8001440 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7fe ffaa 	bl	8000328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f91d 	bl	800162c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2220      	movs	r2, #32
 800142c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2220      	movs	r2, #32
 8001434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	@ 0x28
 800144c:	af02      	add	r7, sp, #8
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b20      	cmp	r3, #32
 8001466:	d16d      	bne.n	8001544 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <HAL_UART_Transmit+0x2c>
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e066      	b.n	8001546 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2221      	movs	r2, #33	@ 0x21
 8001482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001486:	f7ff f8e9 	bl	800065c <HAL_GetTick>
 800148a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	88fa      	ldrh	r2, [r7, #6]
 8001490:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	88fa      	ldrh	r2, [r7, #6]
 8001496:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014a0:	d108      	bne.n	80014b4 <HAL_UART_Transmit+0x6c>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e003      	b.n	80014bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014bc:	e02a      	b.n	8001514 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f840 	bl	800154e <UART_WaitOnFlagUntilTimeout>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e036      	b.n	8001546 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10b      	bne.n	80014f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3302      	adds	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	e007      	b.n	8001506 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001518:	b29b      	uxth	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1cf      	bne.n	80014be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	@ 0x40
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f810 	bl	800154e <UART_WaitOnFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e006      	b.n	8001546 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2220      	movs	r2, #32
 800153c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001544:	2302      	movs	r3, #2
  }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b090      	sub	sp, #64	@ 0x40
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800155e:	e050      	b.n	8001602 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001566:	d04c      	beq.n	8001602 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <UART_WaitOnFlagUntilTimeout+0x30>
 800156e:	f7ff f875 	bl	800065c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800157a:	429a      	cmp	r2, r3
 800157c:	d241      	bcs.n	8001602 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	330c      	adds	r3, #12
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001588:	e853 3f00 	ldrex	r3, [r3]
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001594:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	330c      	adds	r3, #12
 800159c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800159e:	637a      	str	r2, [r7, #52]	@ 0x34
 80015a0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015a6:	e841 2300 	strex	r3, r2, [r1]
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80015ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e5      	bne.n	800157e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3314      	adds	r3, #20
 80015b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	e853 3f00 	ldrex	r3, [r3]
 80015c0:	613b      	str	r3, [r7, #16]
   return(result);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3314      	adds	r3, #20
 80015d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015d2:	623a      	str	r2, [r7, #32]
 80015d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015d6:	69f9      	ldr	r1, [r7, #28]
 80015d8:	6a3a      	ldr	r2, [r7, #32]
 80015da:	e841 2300 	strex	r3, r2, [r1]
 80015de:	61bb      	str	r3, [r7, #24]
   return(result);
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1e5      	bne.n	80015b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2220      	movs	r2, #32
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2220      	movs	r2, #32
 80015f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e00f      	b.n	8001622 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4013      	ands	r3, r2
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	429a      	cmp	r2, r3
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	429a      	cmp	r2, r3
 800161e:	d09f      	beq.n	8001560 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3740      	adds	r7, #64	@ 0x40
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001666:	f023 030c 	bic.w	r3, r3, #12
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	430b      	orrs	r3, r1
 8001672:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699a      	ldr	r2, [r3, #24]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2c      	ldr	r2, [pc, #176]	@ (8001740 <UART_SetConfig+0x114>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d103      	bne.n	800169c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001694:	f7ff fe56 	bl	8001344 <HAL_RCC_GetPCLK2Freq>
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	e002      	b.n	80016a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800169c:	f7ff fe3e 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	009a      	lsls	r2, r3, #2
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	4a22      	ldr	r2, [pc, #136]	@ (8001744 <UART_SetConfig+0x118>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	0119      	lsls	r1, r3, #4
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	009a      	lsls	r2, r3, #2
 80016cc:	441a      	add	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <UART_SetConfig+0x118>)
 80016da:	fba3 0302 	umull	r0, r3, r3, r2
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2064      	movs	r0, #100	@ 0x64
 80016e2:	fb00 f303 	mul.w	r3, r0, r3
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	3332      	adds	r3, #50	@ 0x32
 80016ec:	4a15      	ldr	r2, [pc, #84]	@ (8001744 <UART_SetConfig+0x118>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016f8:	4419      	add	r1, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009a      	lsls	r2, r3, #2
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <UART_SetConfig+0x118>)
 8001712:	fba3 0302 	umull	r0, r3, r3, r2
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2064      	movs	r0, #100	@ 0x64
 800171a:	fb00 f303 	mul.w	r3, r0, r3
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	3332      	adds	r3, #50	@ 0x32
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <UART_SetConfig+0x118>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	f003 020f 	and.w	r2, r3, #15
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	440a      	add	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013800 	.word	0x40013800
 8001744:	51eb851f 	.word	0x51eb851f

08001748 <std>:
 8001748:	2300      	movs	r3, #0
 800174a:	b510      	push	{r4, lr}
 800174c:	4604      	mov	r4, r0
 800174e:	e9c0 3300 	strd	r3, r3, [r0]
 8001752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001756:	6083      	str	r3, [r0, #8]
 8001758:	8181      	strh	r1, [r0, #12]
 800175a:	6643      	str	r3, [r0, #100]	@ 0x64
 800175c:	81c2      	strh	r2, [r0, #14]
 800175e:	6183      	str	r3, [r0, #24]
 8001760:	4619      	mov	r1, r3
 8001762:	2208      	movs	r2, #8
 8001764:	305c      	adds	r0, #92	@ 0x5c
 8001766:	f000 f90f 	bl	8001988 <memset>
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <std+0x58>)
 800176c:	6224      	str	r4, [r4, #32]
 800176e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <std+0x5c>)
 8001772:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <std+0x60>)
 8001776:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <std+0x64>)
 800177a:	6323      	str	r3, [r4, #48]	@ 0x30
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <std+0x68>)
 800177e:	429c      	cmp	r4, r3
 8001780:	d006      	beq.n	8001790 <std+0x48>
 8001782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001786:	4294      	cmp	r4, r2
 8001788:	d002      	beq.n	8001790 <std+0x48>
 800178a:	33d0      	adds	r3, #208	@ 0xd0
 800178c:	429c      	cmp	r4, r3
 800178e:	d105      	bne.n	800179c <std+0x54>
 8001790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001798:	f000 b928 	b.w	80019ec <__retarget_lock_init_recursive>
 800179c:	bd10      	pop	{r4, pc}
 800179e:	bf00      	nop
 80017a0:	08001ca1 	.word	0x08001ca1
 80017a4:	08001cc3 	.word	0x08001cc3
 80017a8:	08001cfb 	.word	0x08001cfb
 80017ac:	08001d1f 	.word	0x08001d1f
 80017b0:	200000d4 	.word	0x200000d4

080017b4 <stdio_exit_handler>:
 80017b4:	4a02      	ldr	r2, [pc, #8]	@ (80017c0 <stdio_exit_handler+0xc>)
 80017b6:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <stdio_exit_handler+0x10>)
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <stdio_exit_handler+0x14>)
 80017ba:	f000 b869 	b.w	8001890 <_fwalk_sglue>
 80017be:	bf00      	nop
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	08001c39 	.word	0x08001c39
 80017c8:	2000001c 	.word	0x2000001c

080017cc <cleanup_stdio>:
 80017cc:	6841      	ldr	r1, [r0, #4]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <cleanup_stdio+0x34>)
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4299      	cmp	r1, r3
 80017d4:	4604      	mov	r4, r0
 80017d6:	d001      	beq.n	80017dc <cleanup_stdio+0x10>
 80017d8:	f000 fa2e 	bl	8001c38 <_fflush_r>
 80017dc:	68a1      	ldr	r1, [r4, #8]
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <cleanup_stdio+0x38>)
 80017e0:	4299      	cmp	r1, r3
 80017e2:	d002      	beq.n	80017ea <cleanup_stdio+0x1e>
 80017e4:	4620      	mov	r0, r4
 80017e6:	f000 fa27 	bl	8001c38 <_fflush_r>
 80017ea:	68e1      	ldr	r1, [r4, #12]
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <cleanup_stdio+0x3c>)
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d004      	beq.n	80017fc <cleanup_stdio+0x30>
 80017f2:	4620      	mov	r0, r4
 80017f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017f8:	f000 ba1e 	b.w	8001c38 <_fflush_r>
 80017fc:	bd10      	pop	{r4, pc}
 80017fe:	bf00      	nop
 8001800:	200000d4 	.word	0x200000d4
 8001804:	2000013c 	.word	0x2000013c
 8001808:	200001a4 	.word	0x200001a4

0800180c <global_stdio_init.part.0>:
 800180c:	b510      	push	{r4, lr}
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <global_stdio_init.part.0+0x30>)
 8001810:	4c0b      	ldr	r4, [pc, #44]	@ (8001840 <global_stdio_init.part.0+0x34>)
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <global_stdio_init.part.0+0x38>)
 8001814:	4620      	mov	r0, r4
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	2104      	movs	r1, #4
 800181a:	2200      	movs	r2, #0
 800181c:	f7ff ff94 	bl	8001748 <std>
 8001820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001824:	2201      	movs	r2, #1
 8001826:	2109      	movs	r1, #9
 8001828:	f7ff ff8e 	bl	8001748 <std>
 800182c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001830:	2202      	movs	r2, #2
 8001832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001836:	2112      	movs	r1, #18
 8001838:	f7ff bf86 	b.w	8001748 <std>
 800183c:	2000020c 	.word	0x2000020c
 8001840:	200000d4 	.word	0x200000d4
 8001844:	080017b5 	.word	0x080017b5

08001848 <__sfp_lock_acquire>:
 8001848:	4801      	ldr	r0, [pc, #4]	@ (8001850 <__sfp_lock_acquire+0x8>)
 800184a:	f000 b8d0 	b.w	80019ee <__retarget_lock_acquire_recursive>
 800184e:	bf00      	nop
 8001850:	20000211 	.word	0x20000211

08001854 <__sfp_lock_release>:
 8001854:	4801      	ldr	r0, [pc, #4]	@ (800185c <__sfp_lock_release+0x8>)
 8001856:	f000 b8cb 	b.w	80019f0 <__retarget_lock_release_recursive>
 800185a:	bf00      	nop
 800185c:	20000211 	.word	0x20000211

08001860 <__sinit>:
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
 8001864:	f7ff fff0 	bl	8001848 <__sfp_lock_acquire>
 8001868:	6a23      	ldr	r3, [r4, #32]
 800186a:	b11b      	cbz	r3, 8001874 <__sinit+0x14>
 800186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001870:	f7ff bff0 	b.w	8001854 <__sfp_lock_release>
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <__sinit+0x28>)
 8001876:	6223      	str	r3, [r4, #32]
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <__sinit+0x2c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f5      	bne.n	800186c <__sinit+0xc>
 8001880:	f7ff ffc4 	bl	800180c <global_stdio_init.part.0>
 8001884:	e7f2      	b.n	800186c <__sinit+0xc>
 8001886:	bf00      	nop
 8001888:	080017cd 	.word	0x080017cd
 800188c:	2000020c 	.word	0x2000020c

08001890 <_fwalk_sglue>:
 8001890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001894:	4607      	mov	r7, r0
 8001896:	4688      	mov	r8, r1
 8001898:	4614      	mov	r4, r2
 800189a:	2600      	movs	r6, #0
 800189c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018a0:	f1b9 0901 	subs.w	r9, r9, #1
 80018a4:	d505      	bpl.n	80018b2 <_fwalk_sglue+0x22>
 80018a6:	6824      	ldr	r4, [r4, #0]
 80018a8:	2c00      	cmp	r4, #0
 80018aa:	d1f7      	bne.n	800189c <_fwalk_sglue+0xc>
 80018ac:	4630      	mov	r0, r6
 80018ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018b2:	89ab      	ldrh	r3, [r5, #12]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d907      	bls.n	80018c8 <_fwalk_sglue+0x38>
 80018b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018bc:	3301      	adds	r3, #1
 80018be:	d003      	beq.n	80018c8 <_fwalk_sglue+0x38>
 80018c0:	4629      	mov	r1, r5
 80018c2:	4638      	mov	r0, r7
 80018c4:	47c0      	blx	r8
 80018c6:	4306      	orrs	r6, r0
 80018c8:	3568      	adds	r5, #104	@ 0x68
 80018ca:	e7e9      	b.n	80018a0 <_fwalk_sglue+0x10>

080018cc <_puts_r>:
 80018cc:	6a03      	ldr	r3, [r0, #32]
 80018ce:	b570      	push	{r4, r5, r6, lr}
 80018d0:	4605      	mov	r5, r0
 80018d2:	460e      	mov	r6, r1
 80018d4:	6884      	ldr	r4, [r0, #8]
 80018d6:	b90b      	cbnz	r3, 80018dc <_puts_r+0x10>
 80018d8:	f7ff ffc2 	bl	8001860 <__sinit>
 80018dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018de:	07db      	lsls	r3, r3, #31
 80018e0:	d405      	bmi.n	80018ee <_puts_r+0x22>
 80018e2:	89a3      	ldrh	r3, [r4, #12]
 80018e4:	0598      	lsls	r0, r3, #22
 80018e6:	d402      	bmi.n	80018ee <_puts_r+0x22>
 80018e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018ea:	f000 f880 	bl	80019ee <__retarget_lock_acquire_recursive>
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	0719      	lsls	r1, r3, #28
 80018f2:	d502      	bpl.n	80018fa <_puts_r+0x2e>
 80018f4:	6923      	ldr	r3, [r4, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d135      	bne.n	8001966 <_puts_r+0x9a>
 80018fa:	4621      	mov	r1, r4
 80018fc:	4628      	mov	r0, r5
 80018fe:	f000 fa51 	bl	8001da4 <__swsetup_r>
 8001902:	b380      	cbz	r0, 8001966 <_puts_r+0x9a>
 8001904:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001908:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800190a:	07da      	lsls	r2, r3, #31
 800190c:	d405      	bmi.n	800191a <_puts_r+0x4e>
 800190e:	89a3      	ldrh	r3, [r4, #12]
 8001910:	059b      	lsls	r3, r3, #22
 8001912:	d402      	bmi.n	800191a <_puts_r+0x4e>
 8001914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001916:	f000 f86b 	bl	80019f0 <__retarget_lock_release_recursive>
 800191a:	4628      	mov	r0, r5
 800191c:	bd70      	pop	{r4, r5, r6, pc}
 800191e:	2b00      	cmp	r3, #0
 8001920:	da04      	bge.n	800192c <_puts_r+0x60>
 8001922:	69a2      	ldr	r2, [r4, #24]
 8001924:	429a      	cmp	r2, r3
 8001926:	dc17      	bgt.n	8001958 <_puts_r+0x8c>
 8001928:	290a      	cmp	r1, #10
 800192a:	d015      	beq.n	8001958 <_puts_r+0x8c>
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	6022      	str	r2, [r4, #0]
 8001932:	7019      	strb	r1, [r3, #0]
 8001934:	68a3      	ldr	r3, [r4, #8]
 8001936:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800193a:	3b01      	subs	r3, #1
 800193c:	60a3      	str	r3, [r4, #8]
 800193e:	2900      	cmp	r1, #0
 8001940:	d1ed      	bne.n	800191e <_puts_r+0x52>
 8001942:	2b00      	cmp	r3, #0
 8001944:	da11      	bge.n	800196a <_puts_r+0x9e>
 8001946:	4622      	mov	r2, r4
 8001948:	210a      	movs	r1, #10
 800194a:	4628      	mov	r0, r5
 800194c:	f000 f9eb 	bl	8001d26 <__swbuf_r>
 8001950:	3001      	adds	r0, #1
 8001952:	d0d7      	beq.n	8001904 <_puts_r+0x38>
 8001954:	250a      	movs	r5, #10
 8001956:	e7d7      	b.n	8001908 <_puts_r+0x3c>
 8001958:	4622      	mov	r2, r4
 800195a:	4628      	mov	r0, r5
 800195c:	f000 f9e3 	bl	8001d26 <__swbuf_r>
 8001960:	3001      	adds	r0, #1
 8001962:	d1e7      	bne.n	8001934 <_puts_r+0x68>
 8001964:	e7ce      	b.n	8001904 <_puts_r+0x38>
 8001966:	3e01      	subs	r6, #1
 8001968:	e7e4      	b.n	8001934 <_puts_r+0x68>
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	6022      	str	r2, [r4, #0]
 8001970:	220a      	movs	r2, #10
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e7ee      	b.n	8001954 <_puts_r+0x88>
	...

08001978 <puts>:
 8001978:	4b02      	ldr	r3, [pc, #8]	@ (8001984 <puts+0xc>)
 800197a:	4601      	mov	r1, r0
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f7ff bfa5 	b.w	80018cc <_puts_r>
 8001982:	bf00      	nop
 8001984:	20000018 	.word	0x20000018

08001988 <memset>:
 8001988:	4603      	mov	r3, r0
 800198a:	4402      	add	r2, r0
 800198c:	4293      	cmp	r3, r2
 800198e:	d100      	bne.n	8001992 <memset+0xa>
 8001990:	4770      	bx	lr
 8001992:	f803 1b01 	strb.w	r1, [r3], #1
 8001996:	e7f9      	b.n	800198c <memset+0x4>

08001998 <__errno>:
 8001998:	4b01      	ldr	r3, [pc, #4]	@ (80019a0 <__errno+0x8>)
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000018 	.word	0x20000018

080019a4 <__libc_init_array>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	2600      	movs	r6, #0
 80019a8:	4d0c      	ldr	r5, [pc, #48]	@ (80019dc <__libc_init_array+0x38>)
 80019aa:	4c0d      	ldr	r4, [pc, #52]	@ (80019e0 <__libc_init_array+0x3c>)
 80019ac:	1b64      	subs	r4, r4, r5
 80019ae:	10a4      	asrs	r4, r4, #2
 80019b0:	42a6      	cmp	r6, r4
 80019b2:	d109      	bne.n	80019c8 <__libc_init_array+0x24>
 80019b4:	f000 fb6e 	bl	8002094 <_init>
 80019b8:	2600      	movs	r6, #0
 80019ba:	4d0a      	ldr	r5, [pc, #40]	@ (80019e4 <__libc_init_array+0x40>)
 80019bc:	4c0a      	ldr	r4, [pc, #40]	@ (80019e8 <__libc_init_array+0x44>)
 80019be:	1b64      	subs	r4, r4, r5
 80019c0:	10a4      	asrs	r4, r4, #2
 80019c2:	42a6      	cmp	r6, r4
 80019c4:	d105      	bne.n	80019d2 <__libc_init_array+0x2e>
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019cc:	4798      	blx	r3
 80019ce:	3601      	adds	r6, #1
 80019d0:	e7ee      	b.n	80019b0 <__libc_init_array+0xc>
 80019d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d6:	4798      	blx	r3
 80019d8:	3601      	adds	r6, #1
 80019da:	e7f2      	b.n	80019c2 <__libc_init_array+0x1e>
 80019dc:	080020ec 	.word	0x080020ec
 80019e0:	080020ec 	.word	0x080020ec
 80019e4:	080020ec 	.word	0x080020ec
 80019e8:	080020f0 	.word	0x080020f0

080019ec <__retarget_lock_init_recursive>:
 80019ec:	4770      	bx	lr

080019ee <__retarget_lock_acquire_recursive>:
 80019ee:	4770      	bx	lr

080019f0 <__retarget_lock_release_recursive>:
 80019f0:	4770      	bx	lr
	...

080019f4 <sbrk_aligned>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	4e0f      	ldr	r6, [pc, #60]	@ (8001a34 <sbrk_aligned+0x40>)
 80019f8:	460c      	mov	r4, r1
 80019fa:	6831      	ldr	r1, [r6, #0]
 80019fc:	4605      	mov	r5, r0
 80019fe:	b911      	cbnz	r1, 8001a06 <sbrk_aligned+0x12>
 8001a00:	f000 fade 	bl	8001fc0 <_sbrk_r>
 8001a04:	6030      	str	r0, [r6, #0]
 8001a06:	4621      	mov	r1, r4
 8001a08:	4628      	mov	r0, r5
 8001a0a:	f000 fad9 	bl	8001fc0 <_sbrk_r>
 8001a0e:	1c43      	adds	r3, r0, #1
 8001a10:	d103      	bne.n	8001a1a <sbrk_aligned+0x26>
 8001a12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001a16:	4620      	mov	r0, r4
 8001a18:	bd70      	pop	{r4, r5, r6, pc}
 8001a1a:	1cc4      	adds	r4, r0, #3
 8001a1c:	f024 0403 	bic.w	r4, r4, #3
 8001a20:	42a0      	cmp	r0, r4
 8001a22:	d0f8      	beq.n	8001a16 <sbrk_aligned+0x22>
 8001a24:	1a21      	subs	r1, r4, r0
 8001a26:	4628      	mov	r0, r5
 8001a28:	f000 faca 	bl	8001fc0 <_sbrk_r>
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d1f2      	bne.n	8001a16 <sbrk_aligned+0x22>
 8001a30:	e7ef      	b.n	8001a12 <sbrk_aligned+0x1e>
 8001a32:	bf00      	nop
 8001a34:	20000214 	.word	0x20000214

08001a38 <_malloc_r>:
 8001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	1ccd      	adds	r5, r1, #3
 8001a3e:	f025 0503 	bic.w	r5, r5, #3
 8001a42:	3508      	adds	r5, #8
 8001a44:	2d0c      	cmp	r5, #12
 8001a46:	bf38      	it	cc
 8001a48:	250c      	movcc	r5, #12
 8001a4a:	2d00      	cmp	r5, #0
 8001a4c:	4606      	mov	r6, r0
 8001a4e:	db01      	blt.n	8001a54 <_malloc_r+0x1c>
 8001a50:	42a9      	cmp	r1, r5
 8001a52:	d904      	bls.n	8001a5e <_malloc_r+0x26>
 8001a54:	230c      	movs	r3, #12
 8001a56:	6033      	str	r3, [r6, #0]
 8001a58:	2000      	movs	r0, #0
 8001a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001b34 <_malloc_r+0xfc>
 8001a62:	f000 f911 	bl	8001c88 <__malloc_lock>
 8001a66:	f8d8 3000 	ldr.w	r3, [r8]
 8001a6a:	461c      	mov	r4, r3
 8001a6c:	bb44      	cbnz	r4, 8001ac0 <_malloc_r+0x88>
 8001a6e:	4629      	mov	r1, r5
 8001a70:	4630      	mov	r0, r6
 8001a72:	f7ff ffbf 	bl	80019f4 <sbrk_aligned>
 8001a76:	1c43      	adds	r3, r0, #1
 8001a78:	4604      	mov	r4, r0
 8001a7a:	d158      	bne.n	8001b2e <_malloc_r+0xf6>
 8001a7c:	f8d8 4000 	ldr.w	r4, [r8]
 8001a80:	4627      	mov	r7, r4
 8001a82:	2f00      	cmp	r7, #0
 8001a84:	d143      	bne.n	8001b0e <_malloc_r+0xd6>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d04b      	beq.n	8001b22 <_malloc_r+0xea>
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	4639      	mov	r1, r7
 8001a8e:	4630      	mov	r0, r6
 8001a90:	eb04 0903 	add.w	r9, r4, r3
 8001a94:	f000 fa94 	bl	8001fc0 <_sbrk_r>
 8001a98:	4581      	cmp	r9, r0
 8001a9a:	d142      	bne.n	8001b22 <_malloc_r+0xea>
 8001a9c:	6821      	ldr	r1, [r4, #0]
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	1a6d      	subs	r5, r5, r1
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7ff ffa6 	bl	80019f4 <sbrk_aligned>
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d03a      	beq.n	8001b22 <_malloc_r+0xea>
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	442b      	add	r3, r5
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	bb62      	cbnz	r2, 8001b14 <_malloc_r+0xdc>
 8001aba:	f8c8 7000 	str.w	r7, [r8]
 8001abe:	e00f      	b.n	8001ae0 <_malloc_r+0xa8>
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	1b52      	subs	r2, r2, r5
 8001ac4:	d420      	bmi.n	8001b08 <_malloc_r+0xd0>
 8001ac6:	2a0b      	cmp	r2, #11
 8001ac8:	d917      	bls.n	8001afa <_malloc_r+0xc2>
 8001aca:	1961      	adds	r1, r4, r5
 8001acc:	42a3      	cmp	r3, r4
 8001ace:	6025      	str	r5, [r4, #0]
 8001ad0:	bf18      	it	ne
 8001ad2:	6059      	strne	r1, [r3, #4]
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	bf08      	it	eq
 8001ad8:	f8c8 1000 	streq.w	r1, [r8]
 8001adc:	5162      	str	r2, [r4, r5]
 8001ade:	604b      	str	r3, [r1, #4]
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	f000 f8d7 	bl	8001c94 <__malloc_unlock>
 8001ae6:	f104 000b 	add.w	r0, r4, #11
 8001aea:	1d23      	adds	r3, r4, #4
 8001aec:	f020 0007 	bic.w	r0, r0, #7
 8001af0:	1ac2      	subs	r2, r0, r3
 8001af2:	bf1c      	itt	ne
 8001af4:	1a1b      	subne	r3, r3, r0
 8001af6:	50a3      	strne	r3, [r4, r2]
 8001af8:	e7af      	b.n	8001a5a <_malloc_r+0x22>
 8001afa:	6862      	ldr	r2, [r4, #4]
 8001afc:	42a3      	cmp	r3, r4
 8001afe:	bf0c      	ite	eq
 8001b00:	f8c8 2000 	streq.w	r2, [r8]
 8001b04:	605a      	strne	r2, [r3, #4]
 8001b06:	e7eb      	b.n	8001ae0 <_malloc_r+0xa8>
 8001b08:	4623      	mov	r3, r4
 8001b0a:	6864      	ldr	r4, [r4, #4]
 8001b0c:	e7ae      	b.n	8001a6c <_malloc_r+0x34>
 8001b0e:	463c      	mov	r4, r7
 8001b10:	687f      	ldr	r7, [r7, #4]
 8001b12:	e7b6      	b.n	8001a82 <_malloc_r+0x4a>
 8001b14:	461a      	mov	r2, r3
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	42a3      	cmp	r3, r4
 8001b1a:	d1fb      	bne.n	8001b14 <_malloc_r+0xdc>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	6053      	str	r3, [r2, #4]
 8001b20:	e7de      	b.n	8001ae0 <_malloc_r+0xa8>
 8001b22:	230c      	movs	r3, #12
 8001b24:	4630      	mov	r0, r6
 8001b26:	6033      	str	r3, [r6, #0]
 8001b28:	f000 f8b4 	bl	8001c94 <__malloc_unlock>
 8001b2c:	e794      	b.n	8001a58 <_malloc_r+0x20>
 8001b2e:	6005      	str	r5, [r0, #0]
 8001b30:	e7d6      	b.n	8001ae0 <_malloc_r+0xa8>
 8001b32:	bf00      	nop
 8001b34:	20000218 	.word	0x20000218

08001b38 <__sflush_r>:
 8001b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	0716      	lsls	r6, r2, #28
 8001b40:	4605      	mov	r5, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	d454      	bmi.n	8001bf0 <__sflush_r+0xb8>
 8001b46:	684b      	ldr	r3, [r1, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	dc02      	bgt.n	8001b52 <__sflush_r+0x1a>
 8001b4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	dd48      	ble.n	8001be4 <__sflush_r+0xac>
 8001b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b54:	2e00      	cmp	r6, #0
 8001b56:	d045      	beq.n	8001be4 <__sflush_r+0xac>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b5e:	682f      	ldr	r7, [r5, #0]
 8001b60:	6a21      	ldr	r1, [r4, #32]
 8001b62:	602b      	str	r3, [r5, #0]
 8001b64:	d030      	beq.n	8001bc8 <__sflush_r+0x90>
 8001b66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b68:	89a3      	ldrh	r3, [r4, #12]
 8001b6a:	0759      	lsls	r1, r3, #29
 8001b6c:	d505      	bpl.n	8001b7a <__sflush_r+0x42>
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001b74:	b10b      	cbz	r3, 8001b7a <__sflush_r+0x42>
 8001b76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b80:	6a21      	ldr	r1, [r4, #32]
 8001b82:	47b0      	blx	r6
 8001b84:	1c43      	adds	r3, r0, #1
 8001b86:	89a3      	ldrh	r3, [r4, #12]
 8001b88:	d106      	bne.n	8001b98 <__sflush_r+0x60>
 8001b8a:	6829      	ldr	r1, [r5, #0]
 8001b8c:	291d      	cmp	r1, #29
 8001b8e:	d82b      	bhi.n	8001be8 <__sflush_r+0xb0>
 8001b90:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <__sflush_r+0xfc>)
 8001b92:	410a      	asrs	r2, r1
 8001b94:	07d6      	lsls	r6, r2, #31
 8001b96:	d427      	bmi.n	8001be8 <__sflush_r+0xb0>
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6062      	str	r2, [r4, #4]
 8001b9c:	6922      	ldr	r2, [r4, #16]
 8001b9e:	04d9      	lsls	r1, r3, #19
 8001ba0:	6022      	str	r2, [r4, #0]
 8001ba2:	d504      	bpl.n	8001bae <__sflush_r+0x76>
 8001ba4:	1c42      	adds	r2, r0, #1
 8001ba6:	d101      	bne.n	8001bac <__sflush_r+0x74>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	b903      	cbnz	r3, 8001bae <__sflush_r+0x76>
 8001bac:	6560      	str	r0, [r4, #84]	@ 0x54
 8001bae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bb0:	602f      	str	r7, [r5, #0]
 8001bb2:	b1b9      	cbz	r1, 8001be4 <__sflush_r+0xac>
 8001bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	d002      	beq.n	8001bc2 <__sflush_r+0x8a>
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f000 fa21 	bl	8002004 <_free_r>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bc6:	e00d      	b.n	8001be4 <__sflush_r+0xac>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	4628      	mov	r0, r5
 8001bcc:	47b0      	blx	r6
 8001bce:	4602      	mov	r2, r0
 8001bd0:	1c50      	adds	r0, r2, #1
 8001bd2:	d1c9      	bne.n	8001b68 <__sflush_r+0x30>
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0c6      	beq.n	8001b68 <__sflush_r+0x30>
 8001bda:	2b1d      	cmp	r3, #29
 8001bdc:	d001      	beq.n	8001be2 <__sflush_r+0xaa>
 8001bde:	2b16      	cmp	r3, #22
 8001be0:	d11d      	bne.n	8001c1e <__sflush_r+0xe6>
 8001be2:	602f      	str	r7, [r5, #0]
 8001be4:	2000      	movs	r0, #0
 8001be6:	e021      	b.n	8001c2c <__sflush_r+0xf4>
 8001be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	e01a      	b.n	8001c26 <__sflush_r+0xee>
 8001bf0:	690f      	ldr	r7, [r1, #16]
 8001bf2:	2f00      	cmp	r7, #0
 8001bf4:	d0f6      	beq.n	8001be4 <__sflush_r+0xac>
 8001bf6:	0793      	lsls	r3, r2, #30
 8001bf8:	bf18      	it	ne
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	680e      	ldr	r6, [r1, #0]
 8001bfe:	bf08      	it	eq
 8001c00:	694b      	ldreq	r3, [r1, #20]
 8001c02:	1bf6      	subs	r6, r6, r7
 8001c04:	600f      	str	r7, [r1, #0]
 8001c06:	608b      	str	r3, [r1, #8]
 8001c08:	2e00      	cmp	r6, #0
 8001c0a:	ddeb      	ble.n	8001be4 <__sflush_r+0xac>
 8001c0c:	4633      	mov	r3, r6
 8001c0e:	463a      	mov	r2, r7
 8001c10:	4628      	mov	r0, r5
 8001c12:	6a21      	ldr	r1, [r4, #32]
 8001c14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001c18:	47e0      	blx	ip
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	dc07      	bgt.n	8001c2e <__sflush_r+0xf6>
 8001c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c2e:	4407      	add	r7, r0
 8001c30:	1a36      	subs	r6, r6, r0
 8001c32:	e7e9      	b.n	8001c08 <__sflush_r+0xd0>
 8001c34:	dfbffffe 	.word	0xdfbffffe

08001c38 <_fflush_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	690b      	ldr	r3, [r1, #16]
 8001c3c:	4605      	mov	r5, r0
 8001c3e:	460c      	mov	r4, r1
 8001c40:	b913      	cbnz	r3, 8001c48 <_fflush_r+0x10>
 8001c42:	2500      	movs	r5, #0
 8001c44:	4628      	mov	r0, r5
 8001c46:	bd38      	pop	{r3, r4, r5, pc}
 8001c48:	b118      	cbz	r0, 8001c52 <_fflush_r+0x1a>
 8001c4a:	6a03      	ldr	r3, [r0, #32]
 8001c4c:	b90b      	cbnz	r3, 8001c52 <_fflush_r+0x1a>
 8001c4e:	f7ff fe07 	bl	8001860 <__sinit>
 8001c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f3      	beq.n	8001c42 <_fflush_r+0xa>
 8001c5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c5c:	07d0      	lsls	r0, r2, #31
 8001c5e:	d404      	bmi.n	8001c6a <_fflush_r+0x32>
 8001c60:	0599      	lsls	r1, r3, #22
 8001c62:	d402      	bmi.n	8001c6a <_fflush_r+0x32>
 8001c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c66:	f7ff fec2 	bl	80019ee <__retarget_lock_acquire_recursive>
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	f7ff ff63 	bl	8001b38 <__sflush_r>
 8001c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c74:	4605      	mov	r5, r0
 8001c76:	07da      	lsls	r2, r3, #31
 8001c78:	d4e4      	bmi.n	8001c44 <_fflush_r+0xc>
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	059b      	lsls	r3, r3, #22
 8001c7e:	d4e1      	bmi.n	8001c44 <_fflush_r+0xc>
 8001c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c82:	f7ff feb5 	bl	80019f0 <__retarget_lock_release_recursive>
 8001c86:	e7dd      	b.n	8001c44 <_fflush_r+0xc>

08001c88 <__malloc_lock>:
 8001c88:	4801      	ldr	r0, [pc, #4]	@ (8001c90 <__malloc_lock+0x8>)
 8001c8a:	f7ff beb0 	b.w	80019ee <__retarget_lock_acquire_recursive>
 8001c8e:	bf00      	nop
 8001c90:	20000210 	.word	0x20000210

08001c94 <__malloc_unlock>:
 8001c94:	4801      	ldr	r0, [pc, #4]	@ (8001c9c <__malloc_unlock+0x8>)
 8001c96:	f7ff beab 	b.w	80019f0 <__retarget_lock_release_recursive>
 8001c9a:	bf00      	nop
 8001c9c:	20000210 	.word	0x20000210

08001ca0 <__sread>:
 8001ca0:	b510      	push	{r4, lr}
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca8:	f000 f978 	bl	8001f9c <_read_r>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	bfab      	itete	ge
 8001cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8001cb4:	181b      	addge	r3, r3, r0
 8001cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001cba:	bfac      	ite	ge
 8001cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001cbe:	81a3      	strhlt	r3, [r4, #12]
 8001cc0:	bd10      	pop	{r4, pc}

08001cc2 <__swrite>:
 8001cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc6:	461f      	mov	r7, r3
 8001cc8:	898b      	ldrh	r3, [r1, #12]
 8001cca:	4605      	mov	r5, r0
 8001ccc:	05db      	lsls	r3, r3, #23
 8001cce:	460c      	mov	r4, r1
 8001cd0:	4616      	mov	r6, r2
 8001cd2:	d505      	bpl.n	8001ce0 <__swrite+0x1e>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cdc:	f000 f94c 	bl	8001f78 <_lseek_r>
 8001ce0:	89a3      	ldrh	r3, [r4, #12]
 8001ce2:	4632      	mov	r2, r6
 8001ce4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	4628      	mov	r0, r5
 8001cec:	463b      	mov	r3, r7
 8001cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf6:	f000 b973 	b.w	8001fe0 <_write_r>

08001cfa <__sseek>:
 8001cfa:	b510      	push	{r4, lr}
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d02:	f000 f939 	bl	8001f78 <_lseek_r>
 8001d06:	1c43      	adds	r3, r0, #1
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	bf15      	itete	ne
 8001d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d16:	81a3      	strheq	r3, [r4, #12]
 8001d18:	bf18      	it	ne
 8001d1a:	81a3      	strhne	r3, [r4, #12]
 8001d1c:	bd10      	pop	{r4, pc}

08001d1e <__sclose>:
 8001d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d22:	f000 b8f7 	b.w	8001f14 <_close_r>

08001d26 <__swbuf_r>:
 8001d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d28:	460e      	mov	r6, r1
 8001d2a:	4614      	mov	r4, r2
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	b118      	cbz	r0, 8001d38 <__swbuf_r+0x12>
 8001d30:	6a03      	ldr	r3, [r0, #32]
 8001d32:	b90b      	cbnz	r3, 8001d38 <__swbuf_r+0x12>
 8001d34:	f7ff fd94 	bl	8001860 <__sinit>
 8001d38:	69a3      	ldr	r3, [r4, #24]
 8001d3a:	60a3      	str	r3, [r4, #8]
 8001d3c:	89a3      	ldrh	r3, [r4, #12]
 8001d3e:	071a      	lsls	r2, r3, #28
 8001d40:	d501      	bpl.n	8001d46 <__swbuf_r+0x20>
 8001d42:	6923      	ldr	r3, [r4, #16]
 8001d44:	b943      	cbnz	r3, 8001d58 <__swbuf_r+0x32>
 8001d46:	4621      	mov	r1, r4
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f000 f82b 	bl	8001da4 <__swsetup_r>
 8001d4e:	b118      	cbz	r0, 8001d58 <__swbuf_r+0x32>
 8001d50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001d54:	4638      	mov	r0, r7
 8001d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	6922      	ldr	r2, [r4, #16]
 8001d5c:	b2f6      	uxtb	r6, r6
 8001d5e:	1a98      	subs	r0, r3, r2
 8001d60:	6963      	ldr	r3, [r4, #20]
 8001d62:	4637      	mov	r7, r6
 8001d64:	4283      	cmp	r3, r0
 8001d66:	dc05      	bgt.n	8001d74 <__swbuf_r+0x4e>
 8001d68:	4621      	mov	r1, r4
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f7ff ff64 	bl	8001c38 <_fflush_r>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d1ed      	bne.n	8001d50 <__swbuf_r+0x2a>
 8001d74:	68a3      	ldr	r3, [r4, #8]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	60a3      	str	r3, [r4, #8]
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	6022      	str	r2, [r4, #0]
 8001d80:	701e      	strb	r6, [r3, #0]
 8001d82:	6962      	ldr	r2, [r4, #20]
 8001d84:	1c43      	adds	r3, r0, #1
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d004      	beq.n	8001d94 <__swbuf_r+0x6e>
 8001d8a:	89a3      	ldrh	r3, [r4, #12]
 8001d8c:	07db      	lsls	r3, r3, #31
 8001d8e:	d5e1      	bpl.n	8001d54 <__swbuf_r+0x2e>
 8001d90:	2e0a      	cmp	r6, #10
 8001d92:	d1df      	bne.n	8001d54 <__swbuf_r+0x2e>
 8001d94:	4621      	mov	r1, r4
 8001d96:	4628      	mov	r0, r5
 8001d98:	f7ff ff4e 	bl	8001c38 <_fflush_r>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	d0d9      	beq.n	8001d54 <__swbuf_r+0x2e>
 8001da0:	e7d6      	b.n	8001d50 <__swbuf_r+0x2a>
	...

08001da4 <__swsetup_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <__swsetup_r+0xa8>)
 8001da8:	4605      	mov	r5, r0
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	460c      	mov	r4, r1
 8001dae:	b118      	cbz	r0, 8001db8 <__swsetup_r+0x14>
 8001db0:	6a03      	ldr	r3, [r0, #32]
 8001db2:	b90b      	cbnz	r3, 8001db8 <__swsetup_r+0x14>
 8001db4:	f7ff fd54 	bl	8001860 <__sinit>
 8001db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dbc:	0719      	lsls	r1, r3, #28
 8001dbe:	d422      	bmi.n	8001e06 <__swsetup_r+0x62>
 8001dc0:	06da      	lsls	r2, r3, #27
 8001dc2:	d407      	bmi.n	8001dd4 <__swsetup_r+0x30>
 8001dc4:	2209      	movs	r2, #9
 8001dc6:	602a      	str	r2, [r5, #0]
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd0:	81a3      	strh	r3, [r4, #12]
 8001dd2:	e033      	b.n	8001e3c <__swsetup_r+0x98>
 8001dd4:	0758      	lsls	r0, r3, #29
 8001dd6:	d512      	bpl.n	8001dfe <__swsetup_r+0x5a>
 8001dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dda:	b141      	cbz	r1, 8001dee <__swsetup_r+0x4a>
 8001ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d002      	beq.n	8001dea <__swsetup_r+0x46>
 8001de4:	4628      	mov	r0, r5
 8001de6:	f000 f90d 	bl	8002004 <_free_r>
 8001dea:	2300      	movs	r3, #0
 8001dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dee:	89a3      	ldrh	r3, [r4, #12]
 8001df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001df4:	81a3      	strh	r3, [r4, #12]
 8001df6:	2300      	movs	r3, #0
 8001df8:	6063      	str	r3, [r4, #4]
 8001dfa:	6923      	ldr	r3, [r4, #16]
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	89a3      	ldrh	r3, [r4, #12]
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	81a3      	strh	r3, [r4, #12]
 8001e06:	6923      	ldr	r3, [r4, #16]
 8001e08:	b94b      	cbnz	r3, 8001e1e <__swsetup_r+0x7a>
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e14:	d003      	beq.n	8001e1e <__swsetup_r+0x7a>
 8001e16:	4621      	mov	r1, r4
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 f83e 	bl	8001e9a <__smakebuf_r>
 8001e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e22:	f013 0201 	ands.w	r2, r3, #1
 8001e26:	d00a      	beq.n	8001e3e <__swsetup_r+0x9a>
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60a2      	str	r2, [r4, #8]
 8001e2c:	6962      	ldr	r2, [r4, #20]
 8001e2e:	4252      	negs	r2, r2
 8001e30:	61a2      	str	r2, [r4, #24]
 8001e32:	6922      	ldr	r2, [r4, #16]
 8001e34:	b942      	cbnz	r2, 8001e48 <__swsetup_r+0xa4>
 8001e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e3a:	d1c5      	bne.n	8001dc8 <__swsetup_r+0x24>
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	0799      	lsls	r1, r3, #30
 8001e40:	bf58      	it	pl
 8001e42:	6962      	ldrpl	r2, [r4, #20]
 8001e44:	60a2      	str	r2, [r4, #8]
 8001e46:	e7f4      	b.n	8001e32 <__swsetup_r+0x8e>
 8001e48:	2000      	movs	r0, #0
 8001e4a:	e7f7      	b.n	8001e3c <__swsetup_r+0x98>
 8001e4c:	20000018 	.word	0x20000018

08001e50 <__swhatbuf_r>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	460c      	mov	r4, r1
 8001e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e58:	4615      	mov	r5, r2
 8001e5a:	2900      	cmp	r1, #0
 8001e5c:	461e      	mov	r6, r3
 8001e5e:	b096      	sub	sp, #88	@ 0x58
 8001e60:	da0c      	bge.n	8001e7c <__swhatbuf_r+0x2c>
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	2100      	movs	r1, #0
 8001e66:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e6a:	bf14      	ite	ne
 8001e6c:	2340      	movne	r3, #64	@ 0x40
 8001e6e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e72:	2000      	movs	r0, #0
 8001e74:	6031      	str	r1, [r6, #0]
 8001e76:	602b      	str	r3, [r5, #0]
 8001e78:	b016      	add	sp, #88	@ 0x58
 8001e7a:	bd70      	pop	{r4, r5, r6, pc}
 8001e7c:	466a      	mov	r2, sp
 8001e7e:	f000 f859 	bl	8001f34 <_fstat_r>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	dbed      	blt.n	8001e62 <__swhatbuf_r+0x12>
 8001e86:	9901      	ldr	r1, [sp, #4]
 8001e88:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e8c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e90:	4259      	negs	r1, r3
 8001e92:	4159      	adcs	r1, r3
 8001e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e98:	e7eb      	b.n	8001e72 <__swhatbuf_r+0x22>

08001e9a <__smakebuf_r>:
 8001e9a:	898b      	ldrh	r3, [r1, #12]
 8001e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e9e:	079d      	lsls	r5, r3, #30
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	d507      	bpl.n	8001eb6 <__smakebuf_r+0x1c>
 8001ea6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	6123      	str	r3, [r4, #16]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	6163      	str	r3, [r4, #20]
 8001eb2:	b003      	add	sp, #12
 8001eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb6:	466a      	mov	r2, sp
 8001eb8:	ab01      	add	r3, sp, #4
 8001eba:	f7ff ffc9 	bl	8001e50 <__swhatbuf_r>
 8001ebe:	9f00      	ldr	r7, [sp, #0]
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f7ff fdb7 	bl	8001a38 <_malloc_r>
 8001eca:	b948      	cbnz	r0, 8001ee0 <__smakebuf_r+0x46>
 8001ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed0:	059a      	lsls	r2, r3, #22
 8001ed2:	d4ee      	bmi.n	8001eb2 <__smakebuf_r+0x18>
 8001ed4:	f023 0303 	bic.w	r3, r3, #3
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	81a3      	strh	r3, [r4, #12]
 8001ede:	e7e2      	b.n	8001ea6 <__smakebuf_r+0xc>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	6020      	str	r0, [r4, #0]
 8001ef0:	b15b      	cbz	r3, 8001f0a <__smakebuf_r+0x70>
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ef8:	f000 f82e 	bl	8001f58 <_isatty_r>
 8001efc:	b128      	cbz	r0, 8001f0a <__smakebuf_r+0x70>
 8001efe:	89a3      	ldrh	r3, [r4, #12]
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	89a3      	ldrh	r3, [r4, #12]
 8001f0c:	431d      	orrs	r5, r3
 8001f0e:	81a5      	strh	r5, [r4, #12]
 8001f10:	e7cf      	b.n	8001eb2 <__smakebuf_r+0x18>
	...

08001f14 <_close_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	2300      	movs	r3, #0
 8001f18:	4d05      	ldr	r5, [pc, #20]	@ (8001f30 <_close_r+0x1c>)
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	602b      	str	r3, [r5, #0]
 8001f20:	f7fe fab1 	bl	8000486 <_close>
 8001f24:	1c43      	adds	r3, r0, #1
 8001f26:	d102      	bne.n	8001f2e <_close_r+0x1a>
 8001f28:	682b      	ldr	r3, [r5, #0]
 8001f2a:	b103      	cbz	r3, 8001f2e <_close_r+0x1a>
 8001f2c:	6023      	str	r3, [r4, #0]
 8001f2e:	bd38      	pop	{r3, r4, r5, pc}
 8001f30:	2000021c 	.word	0x2000021c

08001f34 <_fstat_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	2300      	movs	r3, #0
 8001f38:	4d06      	ldr	r5, [pc, #24]	@ (8001f54 <_fstat_r+0x20>)
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	f7fe faab 	bl	800049c <_fstat>
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	d102      	bne.n	8001f50 <_fstat_r+0x1c>
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	b103      	cbz	r3, 8001f50 <_fstat_r+0x1c>
 8001f4e:	6023      	str	r3, [r4, #0]
 8001f50:	bd38      	pop	{r3, r4, r5, pc}
 8001f52:	bf00      	nop
 8001f54:	2000021c 	.word	0x2000021c

08001f58 <_isatty_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	4d05      	ldr	r5, [pc, #20]	@ (8001f74 <_isatty_r+0x1c>)
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	602b      	str	r3, [r5, #0]
 8001f64:	f7fe faa9 	bl	80004ba <_isatty>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d102      	bne.n	8001f72 <_isatty_r+0x1a>
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	b103      	cbz	r3, 8001f72 <_isatty_r+0x1a>
 8001f70:	6023      	str	r3, [r4, #0]
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	2000021c 	.word	0x2000021c

08001f78 <_lseek_r>:
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	2200      	movs	r2, #0
 8001f82:	4d05      	ldr	r5, [pc, #20]	@ (8001f98 <_lseek_r+0x20>)
 8001f84:	602a      	str	r2, [r5, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f7fe faa1 	bl	80004ce <_lseek>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d102      	bne.n	8001f96 <_lseek_r+0x1e>
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	b103      	cbz	r3, 8001f96 <_lseek_r+0x1e>
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
 8001f98:	2000021c 	.word	0x2000021c

08001f9c <_read_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4d05      	ldr	r5, [pc, #20]	@ (8001fbc <_read_r+0x20>)
 8001fa8:	602a      	str	r2, [r5, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f7fe fa32 	bl	8000414 <_read>
 8001fb0:	1c43      	adds	r3, r0, #1
 8001fb2:	d102      	bne.n	8001fba <_read_r+0x1e>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	b103      	cbz	r3, 8001fba <_read_r+0x1e>
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	2000021c 	.word	0x2000021c

08001fc0 <_sbrk_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4d05      	ldr	r5, [pc, #20]	@ (8001fdc <_sbrk_r+0x1c>)
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4608      	mov	r0, r1
 8001fca:	602b      	str	r3, [r5, #0]
 8001fcc:	f7fe fa8c 	bl	80004e8 <_sbrk>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d102      	bne.n	8001fda <_sbrk_r+0x1a>
 8001fd4:	682b      	ldr	r3, [r5, #0]
 8001fd6:	b103      	cbz	r3, 8001fda <_sbrk_r+0x1a>
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	2000021c 	.word	0x2000021c

08001fe0 <_write_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4d05      	ldr	r5, [pc, #20]	@ (8002000 <_write_r+0x20>)
 8001fec:	602a      	str	r2, [r5, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f7fe fa2d 	bl	800044e <_write>
 8001ff4:	1c43      	adds	r3, r0, #1
 8001ff6:	d102      	bne.n	8001ffe <_write_r+0x1e>
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	b103      	cbz	r3, 8001ffe <_write_r+0x1e>
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	bd38      	pop	{r3, r4, r5, pc}
 8002000:	2000021c 	.word	0x2000021c

08002004 <_free_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4605      	mov	r5, r0
 8002008:	2900      	cmp	r1, #0
 800200a:	d040      	beq.n	800208e <_free_r+0x8a>
 800200c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002010:	1f0c      	subs	r4, r1, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	bfb8      	it	lt
 8002016:	18e4      	addlt	r4, r4, r3
 8002018:	f7ff fe36 	bl	8001c88 <__malloc_lock>
 800201c:	4a1c      	ldr	r2, [pc, #112]	@ (8002090 <_free_r+0x8c>)
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	b933      	cbnz	r3, 8002030 <_free_r+0x2c>
 8002022:	6063      	str	r3, [r4, #4]
 8002024:	6014      	str	r4, [r2, #0]
 8002026:	4628      	mov	r0, r5
 8002028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800202c:	f7ff be32 	b.w	8001c94 <__malloc_unlock>
 8002030:	42a3      	cmp	r3, r4
 8002032:	d908      	bls.n	8002046 <_free_r+0x42>
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	1821      	adds	r1, r4, r0
 8002038:	428b      	cmp	r3, r1
 800203a:	bf01      	itttt	eq
 800203c:	6819      	ldreq	r1, [r3, #0]
 800203e:	685b      	ldreq	r3, [r3, #4]
 8002040:	1809      	addeq	r1, r1, r0
 8002042:	6021      	streq	r1, [r4, #0]
 8002044:	e7ed      	b.n	8002022 <_free_r+0x1e>
 8002046:	461a      	mov	r2, r3
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	b10b      	cbz	r3, 8002050 <_free_r+0x4c>
 800204c:	42a3      	cmp	r3, r4
 800204e:	d9fa      	bls.n	8002046 <_free_r+0x42>
 8002050:	6811      	ldr	r1, [r2, #0]
 8002052:	1850      	adds	r0, r2, r1
 8002054:	42a0      	cmp	r0, r4
 8002056:	d10b      	bne.n	8002070 <_free_r+0x6c>
 8002058:	6820      	ldr	r0, [r4, #0]
 800205a:	4401      	add	r1, r0
 800205c:	1850      	adds	r0, r2, r1
 800205e:	4283      	cmp	r3, r0
 8002060:	6011      	str	r1, [r2, #0]
 8002062:	d1e0      	bne.n	8002026 <_free_r+0x22>
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4408      	add	r0, r1
 800206a:	6010      	str	r0, [r2, #0]
 800206c:	6053      	str	r3, [r2, #4]
 800206e:	e7da      	b.n	8002026 <_free_r+0x22>
 8002070:	d902      	bls.n	8002078 <_free_r+0x74>
 8002072:	230c      	movs	r3, #12
 8002074:	602b      	str	r3, [r5, #0]
 8002076:	e7d6      	b.n	8002026 <_free_r+0x22>
 8002078:	6820      	ldr	r0, [r4, #0]
 800207a:	1821      	adds	r1, r4, r0
 800207c:	428b      	cmp	r3, r1
 800207e:	bf01      	itttt	eq
 8002080:	6819      	ldreq	r1, [r3, #0]
 8002082:	685b      	ldreq	r3, [r3, #4]
 8002084:	1809      	addeq	r1, r1, r0
 8002086:	6021      	streq	r1, [r4, #0]
 8002088:	6063      	str	r3, [r4, #4]
 800208a:	6054      	str	r4, [r2, #4]
 800208c:	e7cb      	b.n	8002026 <_free_r+0x22>
 800208e:	bd38      	pop	{r3, r4, r5, pc}
 8002090:	20000218 	.word	0x20000218

08002094 <_init>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	bf00      	nop
 8002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209a:	bc08      	pop	{r3}
 800209c:	469e      	mov	lr, r3
 800209e:	4770      	bx	lr

080020a0 <_fini>:
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	bf00      	nop
 80020a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a6:	bc08      	pop	{r3}
 80020a8:	469e      	mov	lr, r3
 80020aa:	4770      	bx	lr
